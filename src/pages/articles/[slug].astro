---
import {Image} from "astro:assets";
import {type CollectionEntry, getEntry, getEntries} from "astro:content";
import {getCollection, render} from "astro:content";
import Footer from "../../components/Footer.astro";
import Header from "../../components/Header.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import {pathBuilder} from "../../utils";

function calculateTimeToRead(article: CollectionEntry<"articles">): number {
    const numWords = (article.body || "")
        .replace(/.*\[(.*?)\].*/gm, "$1")
        .replace(/```.*?```/gms, "")
        .split(/\s+/).length;

    const numImages = article.body?.match(/!\[/g)?.length ?? 0;
    const numCodeblocks = article.body?.match(/```/g)?.length ?? 0;

    return Math.ceil(numWords / 150) + Math.ceil(numImages / 6) + Math.ceil(numCodeblocks / 3);
}

export async function getStaticPaths() {
    const articles = await getCollection("articles");
    return articles.map((article) => {
        return {
            params: {slug: article.id},
            props: {article},
        };
    });
}

const {article} = Astro.props;
const {Content, headings} = await render(article);
const {title, publishDate, description, poster, category, tags} = article.data;
const timeToRead = calculateTimeToRead(article);
const categoryEntry = await getEntry(category);
const hasCategory = categoryEntry.id !== "empty";
const tagEntries = await getEntries(tags ?? []);
const hasTags = tagEntries.length > 0;
---

<BaseLayout title={title} description={description}>
    <Fragment slot="head">
        <!-- Open Graph -->
        <meta property="og:title" content={title}>
        <meta property="og:description" content={description}>
        <!--<meta property="og:image" content="https://example.com/images/bread.jpg">-->
        <!--<meta property="og:url" content="https://example.com/bread">-->
        <meta property="og:type" content="article">

        <!-- Twitter Card -->
        <meta name="twitter:card" content="summary_large_image">
        <meta name="twitter:title" content={title}>
        <meta name="twitter:description" content={description}>
        <!--<meta name="twitter:image" content="https://example.com/images/bread.jpg">-->
        <meta name="twitter:site" content="@mephistorine">
    </Fragment>

    <Header/>
    <main class="container">
        <article class="article">
            <header class="article__header">
                <div class="article__info">
                    <span>
                        Опубликовано
                        <time class="article__publish-date"
                              datetime={publishDate.toISOString()}>{publishDate.toLocaleDateString("ru", {dateStyle: "medium"})}</time>
                        Читать <time datetime={`${timeToRead}m`}
                                     class="article__time-to-read">{timeToRead}</time> мин.
                    </span>
                    {hasCategory &&
                        <a href={pathBuilder.singleCategory(categoryEntry.data.slug)}>{categoryEntry.data.name}</a>}
                </div>
                <h1 class="article__title">{title}</h1>
                {description &&
                    <p class="article__description">{description}</p>}
                {poster &&
                    <figure class="article__poster">
                        <Image
                            src={poster.url}
                            alt={poster.alt}
                            layout="constrained"
                            class="article__poster-image"
                        />

                        {poster.author &&
                            <figcaption class="article__poster-caption">
                                Автор фото
                                <a href={poster.author.url}>{poster.author.name}</a>
                            </figcaption>}
                    </figure>}
            </header>
            <aside class="article__sidebar">
                <section class="table-of-content">
                    <h3>Содержание</h3>
                    <ul class="table-of-content__list">
                        {headings.map((heading) => {
                            return <li class="table-of-content__list-item"
                                    style={{"--depth": heading.depth - 2}}><a
                                    href={`#${heading.slug}`}>{heading.text}</a>
                                </li>;
                        })}
                    </ul>
                </section>
                <!--<section>
                    <h3>Свежие статьи</h3>
                </section>-->
            </aside>
            <div class="article__content">
                <Content/>
            </div>
            <footer class="article__footer">
                {hasTags && <section>
                    <h3>Метки</h3>
                    <ul class="item-list">
                        {
                            tagEntries.map((entry) => {
                                return <li><a
                                    href={`/tags/${entry.id}`}>{entry.data.name}</a>
                                </li>;
                            })
                        }
                    </ul>
                </section>}
                <!--<section>
                    <h3>Похожие статьи</h3>
                </section>-->
            </footer>
        </article>
    </main>
    <Footer/>
</BaseLayout>

<style>
    .article {
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        grid-template-rows: min-content 1fr min-content;
    }

    .article__header {
        grid-column: 1/-1;
        grid-row: 1/2;
    }

    .article__sidebar {
        grid-column: 1/5;
    }

    .article__content {
        grid-column: 5/-1;
    }

    .article__content :global(img) {
        cursor: zoom-in;
    }

    .article__title {
        font-size: 4rem;
        margin: 0;
        margin-block-end: 1rem;
    }

    .article__description {
        font-size: 1.3rem;
        margin: 0;
        margin-block-end: 1rem;
    }

    .article__footer {
        grid-column: 1/-1;
        grid-row: 3/-1;
    }

    .article__info {
        display: flex;
        justify-content: space-between;
    }

    .article__poster {
        margin: 0;
    }

    .article__poster-image {
        aspect-ratio: 16/9;
    }

    .article__poster-caption {
        font-size: 0.8rem;
    }

    .table-of-content__list {
        padding: 0;
        margin: 0;
        list-style: none;
    }

    .table-of-content__list-item {
        padding-inline-start: calc(var(--depth, 1) * 1rem);
    }
</style>

<style is:global>
    .lightbox {
        position: fixed;
        top: 0;
        left: 0;
        width: 100dvw;
        height: 100dvh;
        display: flex;
        justify-content: center;
        align-items: center;
        border: 0;
    }

    .lightbox__image {
        height: 100%;
        cursor: zoom-out;
    }
</style>

<script>
    const images = document.querySelectorAll(".article__content img");
    for (const imageElement of images) {
        imageElement.addEventListener("click", (event) => {
            const {target} = event;
            if ((!(target instanceof HTMLImageElement))) {
                return;
            }
            const dialogEl = document.createElement("dialog");
            dialogEl.open = true;
            dialogEl.classList.add("lightbox");
            const close = () => {
                dialogEl.close();
                dialogEl.remove();
            }
            const image = document.createElement("img");
            image.classList.add("lightbox__image")
            image.setAttribute("src", target.getAttribute("src") ?? "");
            image.addEventListener("click", () => close(), {once: true});
            document.addEventListener("keydown", (event) => {
                if (event.key === "Escape") {
                    close()
                }
            }, {once: true})
            dialogEl.appendChild(image);
            document.body.appendChild(dialogEl);
        });
    }
</script>
